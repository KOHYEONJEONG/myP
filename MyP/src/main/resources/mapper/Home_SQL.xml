<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="home">
	<select id="List" resultType="hashmap" parameterType="hashmap">
	<!-- 주말이면 주말 운영 시간을 띄워줘야 할듯!!! -->
	 SELECT TO_CHAR(A.WEEKDAY_START_TIME, 'HH24:MI')AS STARTTIME, TO_CHAR(A.WEEKDAY_END_TIME, 'HH24:MI')AS ENDTIME, A.CAR_PARK_MAG_NUM, A.CAR_PARK_NM,  
	        CASE A.PAYORFREE_DIV WHEN '1' THEN '유료'
	        ELSE '무료'
	        END AS PAYORFREE_DIV,
	        A.LOCX, A.LOCY, NVL(B.REVIEW_NUM,0)AS REVIEW, A.FEE_RATE, A.ADD_FEE, A.ADD_TIME_RATE,A.TIME_RATE, NVL(B.AVG_R,0)AS AVG, NVL(B.CNT,0)AS CNT,
	        DECODE(TIME_RATE,0,0,ROUND(FEE_RATE/(TIME_RATE/5),1)) AS RE_FEE_RATE, DECODE(ADD_TIME_RATE,0,0,ROUND(ADD_FEE/(ADD_TIME_RATE/5),1))AS RE_ADD_FEE, DECODE(CPB.REG_DT, NULL, 0, 1) AS BOOKMARK
	FROM CAR_PARK A LEFT OUTER JOIN (SELECT R.CAR_PARK_MAG_NUM, REVIEW_NUM, ROUND(SUM(CCTV_STAR_SCORE + ENV_STAR_SCORE + FEE_STAR_SCORE + DIS_STAR_SCORE)/4) AS AVG_R , NVL(C.CNT,0) AS CNT
	                                 FROM REVIEW R LEFT OUTER JOIN (SELECT CAR_PARK_MAG_NUM, COUNT (*) AS CNT
	                                                                FROM REVIEW
	                                                                GROUP BY CAR_PARK_MAG_NUM)C
	                                                            ON R.CAR_PARK_MAG_NUM = C.CAR_PARK_MAG_NUM
                                     GROUP BY R.CAR_PARK_MAG_NUM ,R.REVIEW_NUM, CNT)B
                                 ON A.CAR_PARK_MAG_NUM = B.CAR_PARK_MAG_NUM
                    LEFT OUTER JOIN CAR_PARK_BOOKMARK CPB
                                 ON A.CAR_PARK_MAG_NUM = CPB.CAR_PARK_MAG_NUM
                                 <if test="sMemNo != null and sMemNo != ''">
										AND CPB.MEM_NUM = #{sMemNo}
								 </if> 
								 <if test="sMemNo == null or sMemNo == ''">
										AND CPB.MEM_NUM = ''
										
								</if>
    	WHERE ADDRESS LIKE #{sido1} || ' ' || #{gugun1} || '%' AND CAR_PARK_NM LIKE '%' || '' || '%'
	</select>
	
	<!-- 요금계산 버튼 - 금액표 팝업 -->
	<select id="getFeelist" resultType="hashmap" parameterType="hashmap">
		SELECT  CAR_PARK_NM, CASE PAYORFREE_DIV WHEN '1' THEN '유료'  ELSE '무료' END AS PAYORFREE_DIV ,
		        CASE SATURDAY_PAYORFREE_DIV WHEN 1 THEN '유료'  ELSE '무료' END AS SATURDAY_PAYORFREE_DIV,
		        CASE HOLIDAY_PAYORFREE_DIV WHEN 1 THEN '유료' ELSE '무료' END AS HOLIDAY_PAYORFREE_DIV,
		        FULLTIME_MONTHLY,
		        TIME_RATE, FEE_RATE, ADD_FEE, ADD_TIME_RATE,NVL(PHONE, '-') AS PHONE
		FROM CAR_PARK
		WHERE CAR_PARK_MAG_NUM = #{fee_car_num}
	</select>
	
	
	<select id="SearchCnt" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(*) CNT
		FROM CAR_PARK
		WHERE ADDRESS LIKE #{sido1} || ' ' || #{gugun1} || '%' AND CAR_PARK_NM LIKE '%' || #{search_txt} || '%'
	</select>
	
	<select id="CultureList" resultType="hashmap" parameterType="hashmap">
		SELECT CUL_LIFE_NUM, CUL_LIFE, ADDRESS, PHONE, LOCX, LOCY FROM CULTURAL_LIFE
    	WHERE ADDRESS LIKE '%' || #{sido1} || '%' 
    	AND ADDRESS LIKE'%'|| #{gugun1} || '%' 
	</select>
	
	<select id="GasStationList" resultType="hashmap" parameterType="hashmap">
		SELECT GAS_STATION_NUM, GAS_NM, PARCEL_NUM, PHONE, LOCX, LOCY FROM GAS_STATION
		WHERE PARCEL_NUM LIKE '%' || #{sido1} || '%' 
    	AND PARCEL_NUM LIKE'%'|| #{gugun1} || '%' 
	</select>
	
	<select id="RestaurantList" resultType="hashmap" parameterType="hashmap">
		SELECT RESTAURANT_NO, ENT_NM, PARCEL_NUM, LOCX, LOCY, PHONE FROM RESTAURANT
		WHERE PARCEL_NUM LIKE '%' || #{sido1} || '%'
    	AND PARCEL_NUM LIKE'%'|| #{gugun1} || '%'
	</select>
	
	<!-- 지도 위 주차장 팝업 (차 번호, 별점 평균(각회원 별점들을 평균낸 후 마지막에 리뷰개수를 나누었음), 총 리뷰 개수) -->
	<select id="parkPopup" resultType="hashmap" parameterType="hashmap">
<!-- 	SELECT N.CAR_PARK_NM,N.STARTTIME, ROUND(A.TOTAL/A.CNT) ,N.ENDTIME, A.CNT,N.PAYORFREE_DIV, N.LOCX, N.LOCY
FROM(
SELECT A.CAR_PARK_MAG_NUM, SUM(A.AVG_R) AS TOTAL, A.CNT
FROM(
SELECT R.CAR_PARK_MAG_NUM, REVIEW_NUM, SUM(CCTV_STAR_SCORE + ENV_STAR_SCORE + FEE_STAR_SCORE + DIS_STAR_SCORE)/4 AS AVG_R , NVL(C.CNT,0) AS CNT
FROM REVIEW R LEFT OUTER JOIN (SELECT CAR_PARK_MAG_NUM, COUNT (*) AS CNT
                               FROM REVIEW
                               GROUP BY CAR_PARK_MAG_NUM)C
                            ON R.CAR_PARK_MAG_NUM = C.CAR_PARK_MAG_NUM
GROUP BY R.CAR_PARK_MAG_NUM ,R.REVIEW_NUM, CNT)A
WHERE CAR_PARK_MAG_NUM = #{test}
GROUP BY A.CAR_PARK_MAG_NUM ,A.CNT)A LEFT OUTER JOIN (SELECT DISTINCT C.CAR_PARK_MAG_NUM, C.CAR_PARK_NM ,TO_CHAR(WEEKDAY_START_TIME, 'HH24:MI')AS STARTTIME
,TO_CHAR(WEEKDAY_END_TIME, 'HH24:MI')AS ENDTIME,C.PAYORFREE_DIV, C.LOCX, C.LOCY
FROM CAR_PARK C 
LEFT OUTER JOIN REVIEW R
ON C.CAR_PARK_MAG_NUM = R.CAR_PARK_MAG_NUM  
)N
ON A.CAR_PARK_MAG_NUM = N.CAR_PARK_MAG_NUM -->
	</select>
	
	<select id="CinemaList" resultType="hashmap" parameterType="hashmap">
	    SELECT CINEMA_MAG_NUM, ENT_NM, PARCEL_NUM, LOCX, LOCY, PHONE FROM(
		SELECT CINEMA_MAG_NUM, ENT_NM, PARCEL_NUM, LOCX, LOCY, NVL(PHONE, ' ') AS PHONE, 
        ROW_NUMBER() OVER (PARTITION BY PARCEL_NUM ORDER BY CINEMA_MAG_NUM DESC) AS RANK 
        FROM CINEMA) WHERE RANK = '1' AND PARCEL_NUM LIKE '%' || #{sido1} || '%'
    	AND PARCEL_NUM LIKE'%'|| #{gugun1} || '%'
	</select>
	
	<select id="getShortDistance" resultType="hashmap" parameterType="hashmap">
		<!-- 현재 위치에서 목적지 일직선 = 최단거리 (직각 삼각형 : a^2 + b^2 = c^2, 위도, 경도는 직각을 이루고 있어서.)
			1KM = 1000M
			SQRT() : 루트
			POWER() : 제곱함수
			ABS() : 절대값 -->
		SELECT METER, CAR_PARK_NM, LOCX, LOCY,TO_CHAR(WEEKDAY_START_TIME, 'HH24:MI')AS STARTTIME, TO_CHAR(WEEKDAY_END_TIME, 'HH24:MI')AS ENDTIME,FEE_RATE,PAYORFREE_DIV,CAR_PARK_MAG_NUM
		FROM (SELECT CASE 
                WHEN ROUND(SQRT(POWER(ABS(LOCX - #{locx}),2) + POWER(ABS(LOCY - #{locy}),2)) * 111320)>1000 THEN ROUND(ROUND(SQRT(POWER(ABS(LOCX - #{locx}),2) + POWER(ABS(LOCY - #{locy}),2)) * 111320)/1000,1) || 'KM'
                ELSE  ROUND(SQRT(POWER(ABS(LOCX - #{locx}),2) + POWER(ABS(LOCY - #{locy}),2)) * 111320) || 'M'
                END AS METER ,CAR_PARK_NM, LOCX, LOCY,WEEKDAY_START_TIME, WEEKDAY_END_TIME ,FEE_RATE,CAR_PARK_MAG_NUM,
                CASE PAYORFREE_DIV WHEN '1' THEN '유료'
	        	ELSE '무료'
	        	END AS PAYORFREE_DIV,
               RANK() OVER(ORDER BY SQRT(POWER(ABS(LOCX - #{locx}),2) + POWER(ABS(LOCY - #{locy}),2)) ASC)AS RNK
        FROM CAR_PARK) C
		WHERE C.RNK BETWEEN 1 AND 5
	</select>
	
	<select id="ReviewwList" resultType="hashmap" parameterType="hashmap">
	
	   SELECT C.CAR_PARK_NM,ROUND(B.AVG)AS AVG,B.NM,B.TITLE,B.CON,B.DT, B.REVIEW_NUM,B.CAR_PARK_MAG_NUM,B.REG_DT
	   FROM
		(
		SELECT M.NM,A.TITLE,A.AVG,A.REVIEW_NUM,A.CAR_PARK_MAG_NUM,A.CON,CASE WHEN TO_CHAR(A.REG_DT,'YY.MM.DD') = TO_CHAR(SYSDATE, 'YY.MM.DD')
    	THEN TO_CHAR(A.REG_DT, 'HH24:MI')
    	ELSE TO_CHAR(A.REG_DT, 'YY.MM.DD')
        END AS DT, A.REG_DT
		FROM(
		SELECT CAR_PARK_MAG_NUM,MEM_NUM,TITLE,REG_DT,CON,REVIEW_NUM,SUM(CCTV_STAR_SCORE + ENV_STAR_SCORE + FEE_STAR_SCORE + DIS_STAR_SCORE)/4 AS AVG
		FROM REVIEW
		GROUP BY REVIEW_NUM,CON,REG_DT,TITLE,MEM_NUM,CAR_PARK_MAG_NUM)A INNER JOIN MEMBER M
		ON A.MEM_NUM = M.MEM_NUM)B INNER JOIN CAR_PARK C
		ON B.CAR_PARK_MAG_NUM = C.CAR_PARK_MAG_NUM
		WHERE C.CAR_PARK_MAG_NUM = #{carparknum}
		
		<choose>
		<when test = "select eq 1">
			ORDER BY AVG DESC
		</when>
			<when test = "select eq 2">
				ORDER BY REG_DT DESC
			</when>
	</choose>
	</select>
	
	<insert id="insertReport" parameterType="hashmap">
		INSERT INTO REPORT(REPORT_NUM,MEM_NUM,CATE_NUM,REVIEW_NUM)
		VALUES(REP_SEQ.NEXTVAL,#{memno},#{selete},#{send})
	</insert>
	
	<insert id="insertreview" parameterType="hashmap">
		INSERT INTO REVIEW(REVIEW_NUM,MEM_NUM,CAR_PARK_MAG_NUM,TITLE,CON,CCTV_STAR_SCORE,ENV_STAR_SCORE,FEE_STAR_SCORE,DIS_STAR_SCORE)
		VALUES(REV_SEQ.NEXTVAL,#{memno},#{send_car_num},#{title},#{con},#{cctv_star},#{env_star},#{fee_star},#{dis_star})
	</insert>
	
	
	<select id="CateList" resultType="hashmap" parameterType="hashmap">
		 SELECT CATE_NUM , CATE_NM
        FROM CATEGORY
        WHERE DIV_NUM = 2
	</select>
	
		<select id="reportCheck" resultType="int" parameterType="hashmap">
		  SELECT COUNT(*) FROM REPORT WHERE MEM_NUM = #{memno} AND REVIEW_NUM = #{send}	
	</select>
	
	
</mapper>